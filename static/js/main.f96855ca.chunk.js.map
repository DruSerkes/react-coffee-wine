{"version":3,"sources":["components/BtnLink.tsx","helpers/geoCallbacks.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BtnLink","text","color","link","style","backgroundColor","className","href","locationFail","error","console","setTimeout","window","location","reload","INITIAL_STATE","latitude","longitude","App","useState","coords","setCoords","coffeeLink","wineLink","useEffect","navigator","geolocation","getCurrentPosition","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAIaA,G,MAAU,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KACnC,OACI,wBAAQC,MAAO,CAAEC,gBAAiBH,GAASI,UAAU,UAArD,SACI,mBAAGC,KAAMJ,EAAT,SACKF,QCFJO,EAAe,SAACC,GACzBC,QAAQD,MAAM,CAAEA,UAChBE,YAAW,kBAAMC,OAAOC,SAASC,WAAU,MCDzCC,EAA4B,CAChCC,SAAU,EACVC,UAAW,GA2BEC,MAxBf,WAAgB,IAAD,EACeC,mBAAqBJ,GADpC,mBACNK,EADM,KACEC,EADF,KAEPC,EAAU,sCAAkCF,EAAOJ,SAAzC,YAAqDI,EAAOH,UAA5D,kBACVM,EAAQ,sCAAkCH,EAAOJ,SAAzC,YAAqDI,EAAOH,UAA5D,oBASd,OAPAO,qBAAU,WACRC,UAAUC,YAAYC,oBAAmB,SAACC,GAAwB,IAAD,EAC/BA,EAASR,OAAjCJ,EADuD,EACvDA,SAAUC,EAD6C,EAC7CA,UAClBI,EAAU,CAAEL,WAAUC,gBACrBT,KACF,IAGD,sBAAKF,UAAU,MAAf,UACE,mDACA,iCACE,cAAC,EAAD,CAASL,KAAK,SAASC,MAAM,UAAUC,KAAMmB,IAC7C,mCACA,cAAC,EAAD,CAASrB,KAAK,OAAOC,MAAM,UAAUC,KAAMoB,WChBpCM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f96855ca.chunk.js","sourcesContent":["import * as React from 'react';\nimport { BtnLinkProps } from '../types/btn-link';\n\n\nexport const BtnLink = ({ text, color, link }: BtnLinkProps) => {\n    return (\n        <button style={{ backgroundColor: color }} className=\"BtnLink\">\n            <a href={link}>\n                {text}\n            </a>\n        </button>\n    )\n}","export const locationSuccess = (position: Position) => {\n    const { latitude, longitude } = position.coords;\n    return { latitude, longitude };\n};\n\n\nexport const locationFail = (error: PositionError) => {\n    console.error({ error });\n    setTimeout(() => window.location.reload(), 4000);\n};","import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport { BtnLink } from './components/BtnLink';\nimport { locationFail } from './helpers/geoCallbacks'\nimport { CoordsType } from './types/coords-type'\n\nconst INITIAL_STATE: CoordsType = {\n  latitude: 0,\n  longitude: 0\n}\n\nfunction App() {\n  const [coords, setCoords] = useState<CoordsType>(INITIAL_STATE)\n  const coffeeLink = `https://maps.google.com/?ll=${coords.latitude},${coords.longitude}&q=coffee&z=15`;\n  const wineLink = `https://maps.google.com/?ll=${coords.latitude},${coords.longitude}&q=wine+bar&z=15`;\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position: Position) => {\n      const { latitude, longitude } = position.coords;\n      setCoords({ latitude, longitude });\n    }, locationFail);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Would you like...</h1>\n      <main>\n        <BtnLink text=\"Coffee\" color=\"#6F4E37\" link={coffeeLink} />\n        <p>or</p>\n        <BtnLink text=\"Wine\" color=\"#722F37\" link={wineLink} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}